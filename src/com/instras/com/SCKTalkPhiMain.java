/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.instras.com;

import com.phidgets.PhidgetException;
import com.phidgets.StepperPhidget;
import com.phidgets.event.ErrorEvent;
import com.phidgets.event.ErrorListener;
import com.phidgets.event.StepperPositionChangeEvent;
import com.phidgets.event.StepperPositionChangeListener;
import com.phidgets.event.StepperVelocityChangeEvent;
import com.phidgets.event.StepperVelocityChangeListener;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.Timer;

/**
 *
 * @author nathan
 */
public class SCKTalkPhiMain extends javax.swing.JFrame {
    // this object handle talking to the motor control board
    private StepperPhidget stepperPhidget;
    
    // The position target to move to. This must be a very big number to 
    // keep motor turning continuesly
    private long targetPosition = 10000000L;
    
    // The spin speed to set
    private int setSpeed = 3000;
    
    // the time object for count seconds
    private Timer spinTimer = null;
    private int spinTime = 0;
    private int targetSpinTime = 0;
    
    // used to exit the ramp sequence thread if the stop button was pressed
    private boolean stopMotor;
    
    /**
     * Creates new form SCKTalkPhiMain
     */
    public SCKTalkPhiMain() {
        initComponents();
        
        // create a timer object for count seconds the motor is spining
        spinTimer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                updateSpinTime();
            }
        });
        
        // add window listener so that we deactivate the motor when 
        // the window is closed
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                jButton1ActionPerformed(null);
            }
        });
    }
    
    /**
     * Method to update the spin time or stop the motor from spinning
     * 
     */
    private void updateSpinTime() {
        spinTime++;
        
        // check to see if spin time is not more that the target time
        // if it is then stop the motor
        if(targetSpinTime > 0 && spinTime > targetSpinTime) {
            jButton5ActionPerformed(null);
        } else {
            jLabel13.setText(spinTime + " sec");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel14 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();

        jLabel14.setText("Max Speed");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SCKTalkPhi v1.0.0 (02/25/2014)");
        setPreferredSize(new java.awt.Dimension(600, 470));

        jButton1.setText("EXIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("START");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("  UP  ");
        jButton3.setToolTipText("");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("DOWN");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("STOP");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Spin Speed");
        jLabel1.setToolTipText("");

        jTextField1.setText("3000");
        jTextField1.setToolTipText("");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Set Speed (rpm)");

        jCheckBox2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBox2.setForeground(java.awt.Color.blue);
        jCheckBox2.setText("Run Ramp Sequence");
        jCheckBox2.setToolTipText("");
        jCheckBox2.setActionCommand("");

        jLabel3.setText("Step Increment (rpm)");
        jLabel3.setToolTipText("");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "10", "20", "50", "100" }));
        jComboBox1.setSelectedIndex(1);
        jComboBox1.setToolTipText("");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Advance Settings"));

        jLabel4.setText("Accelaration");

        jTextField2.setText("5000");
        jTextField2.setToolTipText("");

        jLabel5.setText("Current Limit");

        jTextField3.setText("1.0");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel6.setText("Target Position");
        jLabel6.setToolTipText("");

        jTextField4.setText("10000000");
        jTextField4.setToolTipText("");

        jLabel7.setText("Current Position");

        jTextField5.setText("0");
        jTextField5.setToolTipText("");

        jLabel8.setText("Rotation");
        jLabel8.setToolTipText("");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Clockwise", "Counter Clockwise" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel15.setText("Max Speed");

        jTextField7.setText("5000");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField5)
                    .addComponent(jTextField2)
                    .addComponent(jTextField3)
                    .addComponent(jTextField4)
                    .addComponent(jComboBox2, 0, 141, Short.MAX_VALUE)
                    .addComponent(jTextField7)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jButton6.setText("Connect");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(java.awt.Color.red);
        jLabel9.setText("Not Connected");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 255));
        jLabel10.setText("0");

        jLabel11.setText("Spin Time (s)");

        jTextField6.setText("0");
        jTextField6.setToolTipText("");
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("STEP #, RPM, Dwell Time (s)\n1, 500, 25\n2, 1500, 30\n3, 2500, 30\n4, 100, 15");
        jScrollPane2.setViewportView(jTextArea2);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setText("Spin Time");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setForeground(java.awt.Color.blue);
        jLabel13.setText("0");

        jLabel16.setText("Ramp Step");

        jTextField8.setText("Not Running");
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 8, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel16))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField8)
                                    .addComponent(jTextField6)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(8, 8, 8)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jButton6)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 29, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel10))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton5)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Method to start the motor turning
     * 
     * @param evt 
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(stepperPhidget == null) return;
        
        try {
            jButton2.setEnabled(false);
            
            //Set up some initial acceleration and velocity values
            Long accleration = new Long(jTextField2.getText());
            stepperPhidget.setAcceleration(0, accleration);
            
            // set the current limit
            stepperPhidget.setCurrentLimit(0, Double.parseDouble(jTextField3.getText()));
            
            // now set the current position
            stepperPhidget.setCurrentPosition(0, 0L);
            
            // set the target position to some really big number
            targetPosition = new Long(jTextField4.getText());
            stepperPhidget.setTargetPosition(0, targetPosition);
            
            // set the spin time
            jTextField6ActionPerformed(null);
            
            // power-up the motor now
            System.out.println("\nEngaging Stepper Motor\n");
            stepperPhidget.setEngaged(0, true);
            
            if(jCheckBox2.isSelected()) {
                // start a step seqence
                startStepSequence();
            } else {
                // start the timer
                spinTimer.start();
            
                // set the speed now
                jTextField1ActionPerformed(null);
            }
        } catch (PhidgetException ex) {
            Logger.getLogger(SCKTalkPhiMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * Method to run the step sequence the step sequence
     */
    private void startStepSequence() {
        SwingWorker worker = new SwingWorker<Boolean, Void>() {
            @Override
            public Boolean doInBackground() {
                stopMotor = false;
                
                // get the step sequences
                String[] stepSeqences = jTextArea2.getText().split("\n");
                
                // interate over the lines containing the seqences
                for(int i = 1; i < stepSeqences.length; i++) {
                    String[] stepInfo = stepSeqences[i].split("\\s*,\\s*");
                    String setSpeedString = stepInfo[1];
                    targetSpinTime = Integer.parseInt(stepInfo[2]);
                    
                    jTextField8.setText(stepInfo[0] + ", " + setSpeedString + " rpms, " + targetSpinTime + " sec");
                    
                    // start the motor spinning
                    jTextField1.setText(setSpeedString);
                    jTextField1ActionPerformed(null);
                    
                    // use a loop to keep track of time this step is running
                    int count = 0;
                    while(count < targetSpinTime) {
                        // check to if the motor was stop
                        if(stopMotor) {
                            jTextField8.setText("Sequenced Stoped ...");
                            return false;
                        }
                        
                        // update the count timer
                        jLabel13.setText("" + (targetSpinTime - count));
                        
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(SCKTalkPhiMain.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        count++;
                    }
                }
                
                // stop the motor now
                jButton5ActionPerformed(null);
                
                // seqeunce complete so return true
                return true;
            }
        };
        
        worker.execute();
    }
    
    /**
     * Exit the program
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(stepperPhidget != null) {
            try {
                stepperPhidget.setEngaged(0, false);
                stepperPhidget.close();
            } catch (PhidgetException ex) {
                Logger.getLogger(SCKTalkPhiMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * Connect to the stepper phidget board
     * 
     * @param evt 
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(stepperPhidget != null) {
            return;
        }
        try {
            stepperPhidget = new StepperPhidget();
            stepperPhidget.openAny();
            
            System.out.println("Waiting for the Phidget Stepper to be attached...\n");
            stepperPhidget.waitForAttachment();
            
            System.out.println("Phidget Information");
            System.out.println("================================================");
            System.out.println("Version: " + stepperPhidget.getDeviceVersion());
            System.out.println("Name: " + stepperPhidget.getDeviceName());
            System.out.println("Serial #: " + stepperPhidget.getSerialNumber());
            System.out.println("# Steppers: " + stepperPhidget.getMotorCount());
            
            // update the UI label to indicate successful connection
            jLabel9.setForeground(new Color(0x00, 0xC0, 0x00));
            jLabel9.setText("Connected to SCK-200X");
            
            // add some listeners now
            stepperPhidget.addErrorListener(new ErrorListener() {
                public void error(ErrorEvent ex) {
                    jLabel9.setText("Connection Failed ...");
                    System.out.println("\n--->Error: " + ex.getException());
                }
            });
            
            // listener which displays the current rpm
            stepperPhidget.addStepperVelocityChangeListener(new StepperVelocityChangeListener() {
                @Override
                public void stepperVelocityChanged(StepperVelocityChangeEvent svce) {
                    int speed = (int)(((svce.getValue()/16.0)/96.0)*60.0);
                    jLabel10.setText(speed + " rpms");
                }
            });
            
            // listener to update the position
            stepperPhidget.addStepperPositionChangeListener(new StepperPositionChangeListener() {
                @Override
                public void stepperPositionChanged(StepperPositionChangeEvent spce) {
                    double position = spce.getValue();
                    jTextField5.setText("" + position);
                }
            });
        } catch (PhidgetException ex) {
            Logger.getLogger(SCKTalkPhiMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed
    
    /**
     * Set the current motor speed
     * 
     * @param evt 
     */
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        try {
            int changeBy = 50; // how much to change the speed by
                    
            int newSpeed = Integer.parseInt(jTextField1.getText());
            
            if(newSpeed >= setSpeed) {
                /* we need to increate is steps of 100 rpms
                int diff = newSpeed- setSpeed;
                while (setSpeed < newSpeed && diff > changeBy) {
                    setSpeed += changeBy;
                    setMotorSpeed();
                    
                    // pause a bit before increasing speed again
                    Thread.sleep(50);
                }*/
                
                setSpeed = newSpeed;
                setMotorSpeed();
            } else {
                // we need to decrese is steps of 100 rpms
                int diff = setSpeed - newSpeed;
                while (setSpeed > newSpeed && diff > changeBy) {
                    setSpeed -= changeBy;
                    setMotorSpeed();
                    
                    // pause a bit before increasing speed again
                    Thread.sleep(50);
                }
                
                setSpeed = newSpeed;
                setMotorSpeed();
            }
        } catch(NumberFormatException nfe) { } catch (InterruptedException ex) {
            Logger.getLogger(SCKTalkPhiMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTextField1ActionPerformed
    
    /**
     * Stop the motor
     * @param evt 
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        stopMotor = true;
        
        try {
            if(stepperPhidget != null) {
                stepperPhidget.setEngaged(0, false);
            }
            
            spinTimer.stop();
            spinTime = 0;
            
            jLabel10.setText("stopped");
            jLabel13.setText("0");
            jButton2.setEnabled(true);
        } catch (PhidgetException ex) {
            Logger.getLogger(SCKTalkPhiMain.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * The UP button was pressed so increment the current speed
     * 
     * @param evt 
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int increment = Integer.parseInt(jComboBox1.getSelectedItem().toString());
        setSpeed += increment;
        
        // update the UI and set the motor speed
        jTextField1.setText(""+ setSpeed);
        
        setMotorSpeed();
    }//GEN-LAST:event_jButton3ActionPerformed
    
    /**
     * The DOWN button was pressed so reduce the speed
     * 
     * @param evt 
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int increment = Integer.parseInt(jComboBox1.getSelectedItem().toString());
        setSpeed -= increment;
        
        if(setSpeed < 0) {
            setSpeed = 0;
        }
        
        // update the UI and set the motor speed
        jTextField1.setText(""+ setSpeed);
        
        setMotorSpeed();
    }//GEN-LAST:event_jButton4ActionPerformed
    
    /**
     * Set the current sent to the motor
     * 
     * @param evt 
     */
    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        if(stepperPhidget == null) return;
        
        try {
            double current = Double.parseDouble(jTextField3.getText());
            System.out.println("Setting Current To: " + current);
            stepperPhidget.setCurrentLimit(0, current);
        } catch (PhidgetException ex) {
            Logger.getLogger(SCKTalkPhiMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTextField3ActionPerformed
    
    /**
     * Set the target time
     * 
     * @param evt 
     */
    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        try {
            targetSpinTime = Integer.parseInt(jTextField6.getText());
            System.out.println("Target Spin Time: " + targetSpinTime);
        } catch(NumberFormatException nfe) {}
    }//GEN-LAST:event_jTextField6ActionPerformed
    
    /**
     * Used to set the direction of rotation
     * @param evt 
     */
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        if(jComboBox2.getSelectedIndex() == 0) {
            jTextField4.setText("" + targetPosition);
        } else {
            jTextField4.setText("-" + targetPosition);
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed
    
    /**
     * Start the step sequence. This is just for testing
     * @param evt 
     */
    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        startStepSequence();
    }//GEN-LAST:event_jTextField8ActionPerformed
    
    /**
     * Given an RPM reading set the speed by converting to micro-steps per second
     */
    public void setMotorSpeed() {
        double rps = setSpeed/60.0; // rounds per second 
        double sps = rps*96.0;      // steps per second 
        long msps = (long)sps*16;   // get the microsteps needed
        
        System.out.println("RPM: " + setSpeed + ", Microsteps/sec: " + msps);
        
        if(stepperPhidget != null) {
            try {
                stepperPhidget.setVelocityLimit(0, msps);
            } catch (PhidgetException ex) {
                Logger.getLogger(SCKTalkPhiMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SCKTalkPhiMain mainFrame = new SCKTalkPhiMain();
                mainFrame.pack();
                mainFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
